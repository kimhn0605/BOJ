[ 문제 1181 ]

* sort() 함수
 => 원본 리스트 변경

* sorted() 함수
 => 새로운 정렬된 리스트 반환

* 딕셔너리 키 또는 값으로 정렬
 1) key 를 기준으로 정렬 (오름차순)
  => sorted_dict = sorted(my_dict.items())

 2) key 를 기준으로 정렬 (내림차순)
  => sorted_dict = sorted(my_dict.items(), key = lambda item : item[0], reverse = True)
  => 여기서 item[0] 은 딕셔너리의 key 의미

 3) value 를 기준으로 정렬 (오름차순)
  => sorted_dict = sorted(my_dict.items(), key = lambda item : item[1])
  => 여기서 item[1] 은 딕셔너리의 value 의미

 4) value 를 기준으로 정렬 (내름차순)
  => sorted_dict = sorted(my_dict.items(), key = lambda item : item[1], reverse = True)

* 리스트 부분 정렬
 => list_name[:i+1] = sorted(list_name[:i+1])

* 문자열에서 따옴표 제거
 1) replace() 메서드 사용
  => new_string = old_string.replace('"', '')

 2) strip() 메서드 사용
  => new_string = old_string.strip('"')

[ 문제 10989 ]

* 계수 정렬
 - 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작하는 정렬 알고리즘
   - 계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용 가능
 
 - 데이터의 개수가 N, 데이터 (양수) 중 최댓값이 K일 때 최악의 경우에도 수행 시간 O(N + K) 보장
  - 계수 정렬의 시간 복잡도와 공간 복잡도는 모두 O(N + K)

 - 동일한 값을 가지는 데이터가 여러 개 등장할 때 (중복되는 값이 존재할 때) 효과적으로 사용 가능

[ 문제 10814 ]

* 람다 함수
 - 함수를 따로 선언하지 않고 함수명 없이 람다식으로 대체
 - 한 번만 사용하고 사라지기 때문에 메모리를 효율적으로 사용

* 람다 함수 사용법
 - lambda 매개변수 : 결과
  ex) f = lambda x : x + 10

* 람다식으로 sorted key 지정
 - 오름차순 정렬 : sorted(key = lambda x : x[0])
 - 내림차순 정렬 : sorted(key = lambda x : -x[0])

* stable 정렬
 - stable 정렬 (안정 정렬) 이란?
  - 입력 받은 값들 중에서 동일한 값이 있는 경우 해당 값의 순서를 그대로 유지 
  - 파이썬의 기본적으로 stable 정렬
    ex) [1, 2, 3(x), 4, 5, 3(y)] 오름차순으로 정렬하면 [1, 2, 3(x), 3(y), 4, 5] 
      => x, y 앞뒤 순서 유지
